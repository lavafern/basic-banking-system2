openapi: 3.0.3
info:
  title: Basic banking system
  description: |-
    chapter 5 challenge
  contact:
    email: rian.rafli@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1
tags:
  - name: User
    description: Operations related to users
  - name: Post
    description: Operations related to posts
paths:
  /users:
    post:
      tags:
        - User
      operationId: post-create-new-user
      summary: Create a new user
      description: Creates a new user with the provided information.
      requestBody:
        $ref: "#/components/requestBodies/CreateUser"
      responses:
        "201":
          description: Successful user creation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/UserModel"
    get:
      tags:
        - User
      operationId: get-fetch-all-user
      summary: Get all users
      description: Retrieves a list of all registered users.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items : 
                          type: object
                          properties:
                            id:
                              type: integer
                            name:
                              type: string
                            email:
                              type: string
                              format: email
                            password:
                              type: string
                            profile:
                              type: object
                              properties:
                                identity_type: 
                                  type: string
                                identity_number: 
                                  type: string
                                address:
                                 type: string

  "/users/{userId}":
    get:
      tags:
        - User
      operationId: get-fetch-user-detail
      summary: Get user details
      description: Retrieves details of a specific user.
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: The ID of the user to retrieve.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                       type: object
                       properties:
                         id:
                           type: integer
                         name:
                           type: string
                         email:
                           type: string
                           format: email
                         password:
                           type: string
    put:
      tags:
        - User
      operationId: put-update-user
      summary: Update user details
      description: Updates details of a specific user.
      requestBody:
        description: A JSON object containing pet information
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "wow"
      

              
               
             
             
             
             
             
             
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: The ID of the user to update.
      responses:
        "200":
          description: Successful user update
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                       type: object
                       properties:
                         id:
                           type: integer
                         name:
                           type: string
                         email:
                           type: string
                           format: email
                         password:
                           type: string
    delete:
      tags:
        - User
      operationId: delete-remove-user
      summary: Delete user
      description: Deletes a specific user.
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: The ID of the user to delete.
      responses:
        "200":
          description: Successful user deletion
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        example: null
  /posts:
    post:
      tags:
        - Post
      operationId: post-create-post
      summary: Create a new post
      description: Creates a new post with the provided information.
      requestBody:
        $ref: "#/components/requestBodies/CreatePost"
      responses:
        "201":
          description: Successful post creation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/PostModel"
    get:
      tags:
        - Post
      operationId: get-fetch-all-post
      summary: Get all posts
      description: Retrieves a list of all registered posts.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Page number for pagination.
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Number of items per page.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          pagination:
                            $ref: "#/components/schemas/Pagination"
                          posts:
                            type: array
                            items:
                              $ref: "#/components/schemas/PostModel"
  "/posts/{postId}":
    get:
      tags:
        - Post
      operationId: get-fetch-post-detail
      summary: Get post details
      description: Retrieves details of a specific post.
      parameters:
        - in: path
          name: postId
          schema:
            type: integer
          required: true
          description: The ID of the post to retrieve.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/PostModel"
components:
  schemas:
    BasicResponse:
      title: BasicResponse
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "succesfully do task"
    UserModel:
      title: User
      type: object
      properties:
        newUser:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            email:
              type: string
              format: email
        profile:
          type: object
          properties:
            id:
              type: integer
            identity_type:
              type: string
            identity_number:
              type: string
            address:
              type: string
            user_id:
              type: integer

        # id:
          # type: integer
          # example: 1
        # name:
          # type: string
          # example: "bujang"
        # email:
          # type: string
          # example: "bujang@mail.com"
    PostModel:
      title: Post
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Software Development Life Cycle"
        isPublished:
          type: boolean
          example: true
    Pagination:
      title: Pagination
      type: object
      properties:
        links:
          type: object
          properties:
            next:
              type: string
              example: "https://domain.com/users?page=3&limit=10"
            prev:
              type: string
              example: "https://domain.com/users?page=1&limit=10"
        total_items:
          type: integer
          example: 100
  requestBodies:
    CreateUser:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: "rian"
              name:
                type: string
                example: "rian@mail.com"
              password:
                type: string
                example: "password123"
              identity_type:
                type: string
                example: "passport"
              identity_number:
                type: string
                example: "389287482"
              address :
                type: string
                example: "Jakarta"  
    CreatePost:
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                example: "Software Development Life Cycle"
              categories:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: "Programming"
              authorId:
                type: integer
                example: 1